{"ast":null,"code":"var _jsxFileName = \"/home/pantero/Code/Challenges/PostLight/EmpDir-Client/client/src/components/EmployeeList.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport MovieItem from './MovieItem';\nimport './MovieList.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst MovieList = () => {\n  _s();\n\n  //class MovieList extends React.Component {\n  //constructor() {\n  //super();\n  //this.state = {\n  //error: null,\n  //isLoaded: false,\n  //movies: []\n  //};\n  //  }\n  const [isLoaded, setIsLoaded] = useState(false);\n  const [error, setError] = useState(null);\n  const [movies, setMovies] = useState([]); //  componentDidMount() {\n  //const url = 'https://movied.herokuapp.com/discover'\n  //fetch(url)\n  //.then(res => res.json())\n  //.then(\n  //(result) => {\n  //console.log(result)\n  //this.setState({\n  //isLoaded: true,\n  //movies: result\n  //});\n  //},\n  //(error) => {\n  //this.setState({\n  //isLoaded: true,\n  //error\n  //});\n  //}\n  //)\n  //  }\n\n  useEffect(() => {\n    console.log('mounted');\n    const url = 'https://movied.herokuapp.com/discover';\n    fetch(url).then(res => res.json()).then(result => {\n      console.log(result);\n      setIsLoaded(true);\n      setMovies(result);\n    }, error => {\n      setIsLoaded(true);\n      setError(error);\n    });\n  }, []);\n\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [\"Error: \", error.message]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 60,\n      columnNumber: 14\n    }, this);\n  } else if (!isLoaded) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: \"Loading...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 14\n    }, this);\n  } else {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"movieList\",\n      children: movies.map(movie => {\n        return /*#__PURE__*/_jsxDEV(MovieItem, {\n          movie: movie\n        }, movie.id, false, {\n          fileName: _jsxFileName,\n          lineNumber: 67,\n          columnNumber: 16\n        }, this);\n      })\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this);\n  }\n};\n\n_s(MovieList, \"TyHRlCSbOIMmPyz+RN8y+SFJxc0=\");\n\n_c = MovieList;\nexport default MovieList;\n\nvar _c;\n\n$RefreshReg$(_c, \"MovieList\");","map":{"version":3,"sources":["/home/pantero/Code/Challenges/PostLight/EmpDir-Client/client/src/components/EmployeeList.js"],"names":["React","useState","useEffect","MovieItem","MovieList","isLoaded","setIsLoaded","error","setError","movies","setMovies","console","log","url","fetch","then","res","json","result","message","map","movie","id"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,EAA0BC,SAA1B,QAA2C,OAA3C;AACA,OAAOC,SAAP,MAAsB,aAAtB;AACA,OAAO,iBAAP;;;AAEA,MAAMC,SAAS,GAAG,MAAM;AAAA;;AACxB;AACE;AACE;AACA;AACE;AACA;AACA;AACF;AACJ;AAEE,QAAM,CAAEC,QAAF,EAAYC,WAAZ,IAA4BL,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAAEM,KAAF,EAASC,QAAT,IAAsBP,QAAQ,CAAC,IAAD,CAApC;AACA,QAAM,CAAEQ,MAAF,EAAUC,SAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC,CAbsB,CAgBxB;AACI;AACA;AACE;AACA;AACE;AACE;AACA;AACE;AACA;AACF;AACF;AACA;AACE;AACE;AACA;AACF;AACF;AACF;AACN;;AAEEC,EAAAA,SAAS,CAAC,MAAM;AACdS,IAAAA,OAAO,CAACC,GAAR,CAAY,SAAZ;AACA,UAAMC,GAAG,GAAG,uCAAZ;AACAC,IAAAA,KAAK,CAACD,GAAD,CAAL,CACGE,IADH,CACQC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADf,EAEGF,IAFH,CAGKG,MAAD,IAAY;AACVP,MAAAA,OAAO,CAACC,GAAR,CAAYM,MAAZ;AACAZ,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAI,MAAAA,SAAS,CAACQ,MAAD,CAAT;AACC,KAPP,EAQKX,KAAD,IAAW;AACTD,MAAAA,WAAW,CAAC,IAAD,CAAX;AACAE,MAAAA,QAAQ,CAACD,KAAD,CAAR;AACD,KAXL;AAYD,GAfQ,EAeN,EAfM,CAAT;;AAiBE,MAAIA,KAAJ,EAAW;AACT,wBAAO;AAAA,4BAAaA,KAAK,CAACY,OAAnB;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFD,MAEO,IAAI,CAACd,QAAL,EAAe;AACpB,wBAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAP;AACD,GAFM,MAEA;AACL,wBACA;AAAK,MAAA,SAAS,EAAC,WAAf;AAAA,gBACCI,MAAM,CAACW,GAAP,CAAWC,KAAK,IAAI;AACnB,4BAAO,QAAC,SAAD;AAA0B,UAAA,KAAK,EAAEA;AAAjC,WAAgBA,KAAK,CAACC,EAAtB;AAAA;AAAA;AAAA;AAAA,gBAAP;AACD,OAFA;AADD;AAAA;AAAA;AAAA;AAAA,YADA;AAOD;AACJ,CAnED;;GAAMlB,S;;KAAAA,S;AAoEN,eAAeA,SAAf","sourcesContent":["import React, { useState, useEffect } from 'react'\nimport MovieItem from './MovieItem'\nimport './MovieList.css'\n\nconst MovieList = () => {\n//class MovieList extends React.Component {\n  //constructor() {\n    //super();\n    //this.state = {\n      //error: null,\n      //isLoaded: false,\n      //movies: []\n    //};\n//  }\n\n  const [ isLoaded, setIsLoaded ] = useState(false);\n  const [ error, setError ] = useState(null);\n  const [ movies, setMovies ] = useState([])\n\n\n//  componentDidMount() {\n    //const url = 'https://movied.herokuapp.com/discover'\n    //fetch(url)\n      //.then(res => res.json())\n      //.then(\n        //(result) => {\n          //console.log(result)\n          //this.setState({\n            //isLoaded: true,\n            //movies: result\n          //});\n        //},\n        //(error) => {\n          //this.setState({\n            //isLoaded: true,\n            //error\n          //});\n        //}\n      //)\n//  }\n\n  useEffect(() => {\n    console.log('mounted')\n    const url = 'https://movied.herokuapp.com/discover'\n    fetch(url)\n      .then(res => res.json())\n      .then(\n        (result) => {\n          console.log(result)\n          setIsLoaded(true)\n          setMovies(result)\n          },\n        (error) => {\n          setIsLoaded(true)\n          setError(error)\n        });\n  }, [])\n\n    if (error) {\n      return <div>Error: {error.message}</div>;\n    } else if (!isLoaded) {\n      return <div>Loading...</div>;\n    } else {\n      return (\n      <div className='movieList'>\n      {movies.map(movie => {\n        return <MovieItem key={movie.id} movie={movie} />\n      })}\n      </div>\n      );\n    }\n}\nexport default MovieList\n"]},"metadata":{},"sourceType":"module"}